"use strict";(self.webpackChunksigmasoft_datatable_bundle_docs=self.webpackChunksigmasoft_datatable_bundle_docs||[]).push([[6155],{7471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"developer-guide/architecture","title":"Architecture du Bundle","description":"Guide d\xe9taill\xe9 de l\'architecture interne du SigmasoftDataTableBundle. \ud83c\udfd7\ufe0f","source":"@site/docs/developer-guide/architecture.md","sourceDirName":"developer-guide","slug":"/developer-guide/architecture","permalink":"/SigmasoftDataTableBundle/en/docs/developer-guide/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/Chancel18/SigmasoftDataTableBundle/tree/master/docs/docs/developer-guide/architecture.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Personnalisation Avanc\xe9e","permalink":"/SigmasoftDataTableBundle/en/docs/user-guide/customization"},"next":{"title":"API Reference - Vue d\'ensemble","permalink":"/SigmasoftDataTableBundle/en/docs/api/overview"}}');var a=t(4848),r=t(8453);const s={sidebar_position:1},l="Architecture du Bundle",d={},o=[{value:"Vue d&#39;ensemble",id:"vue-densemble",level:2},{value:"Patterns Architecturaux",id:"patterns-architecturaux",level:2},{value:"1. Builder Pattern",id:"1-builder-pattern",level:3},{value:"2. Factory Pattern",id:"2-factory-pattern",level:3},{value:"3. Strategy Pattern",id:"3-strategy-pattern",level:3},{value:"4. Registry Pattern",id:"4-registry-pattern",level:3},{value:"Architecture en Couches",id:"architecture-en-couches",level:2},{value:"1. Couche Pr\xe9sentation",id:"1-couche-pr\xe9sentation",level:3},{value:"2. Couche Service",id:"2-couche-service",level:3},{value:"3. Couche Donn\xe9es",id:"3-couche-donn\xe9es",level:3},{value:"Configuration et Injection de D\xe9pendances",id:"configuration-et-injection-de-d\xe9pendances",level:2},{value:"Configuration du Bundle",id:"configuration-du-bundle",level:3},{value:"Compiler Pass",id:"compiler-pass",level:3},{value:"S\xe9curit\xe9 et Validation",id:"s\xe9curit\xe9-et-validation",level:2},{value:"Architecture de S\xe9curit\xe9",id:"architecture-de-s\xe9curit\xe9",level:3},{value:"Validation en Profondeur",id:"validation-en-profondeur",level:3},{value:"Performance et Optimisation",id:"performance-et-optimisation",level:2},{value:"Strat\xe9gies de Cache",id:"strat\xe9gies-de-cache",level:3},{value:"Optimisation des Requ\xeates",id:"optimisation-des-requ\xeates",level:3},{value:"Tests et Qualit\xe9",id:"tests-et-qualit\xe9",level:2},{value:"Structure des Tests",id:"structure-des-tests",level:3},{value:"Tests Unitaires",id:"tests-unitaires",level:3},{value:"Extension et Personnalisation",id:"extension-et-personnalisation",level:2},{value:"Cr\xe9er un Renderer Personnalis\xe9",id:"cr\xe9er-un-renderer-personnalis\xe9",level:3},{value:"Enregistrement du Renderer",id:"enregistrement-du-renderer",level:3},{value:"JavaScript et Frontend",id:"javascript-et-frontend",level:2},{value:"Architecture Stimulus",id:"architecture-stimulus",level:3},{value:"Service d&#39;\xc9dition Inline",id:"service-d\xe9dition-inline",level:3},{value:"Support et Ressources",id:"support-et-ressources",level:2},{value:"Documentation Compl\xe8te",id:"documentation-compl\xe8te",level:3},{value:"Communaut\xe9 et Support",id:"communaut\xe9-et-support",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"architecture-du-bundle",children:"Architecture du Bundle"})}),"\n",(0,a.jsx)(n.p,{children:"Guide d\xe9taill\xe9 de l'architecture interne du SigmasoftDataTableBundle. \ud83c\udfd7\ufe0f"}),"\n",(0,a.jsx)(n.h2,{id:"vue-densemble",children:"Vue d'ensemble"}),"\n",(0,a.jsx)(n.p,{children:"Le SigmasoftDataTableBundle utilise une architecture modulaire bas\xe9e sur les principes SOLID et les design patterns modernes."}),"\n",(0,a.jsx)(n.mermaid,{value:"graph TB\n    A[Controller] --\x3e B[DataTableBuilder]\n    B --\x3e C[Configuration]\n    C --\x3e D[DataProvider]\n    D --\x3e E[Live Component]\n    E --\x3e F[Twig Template]\n    F --\x3e G[JavaScript Controller]\n    \n    H[InlineEdit Service] --\x3e I[Field Renderers]\n    I --\x3e J[Validation]\n    J --\x3e K[Entity Manager]\n    \n    L[Maker Command] --\x3e M[Code Generator]\n    M --\x3e N[Template Skeleton]"}),"\n",(0,a.jsx)(n.h2,{id:"patterns-architecturaux",children:"Patterns Architecturaux"}),"\n",(0,a.jsx)(n.h3,{id:"1-builder-pattern",children:"1. Builder Pattern"}),"\n",(0,a.jsxs)(n.p,{children:["Le ",(0,a.jsx)(n.code,{children:"DataTableBuilder"})," utilise le pattern Builder pour une configuration fluide :"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Builder;\n\nfinal class DataTableBuilder\n{\n    private DataTableConfiguration $configuration;\n    \n    public function createDataTable(string $entityClass): self\n    {\n        $this->configuration = new DataTableConfiguration($entityClass);\n        return $this;\n    }\n    \n    public function addColumn(ColumnInterface $column): self\n    {\n        $this->configuration->addColumn($column);\n        return $this;\n    }\n    \n    // Cha\xeenage de m\xe9thodes pour configuration fluide\n    public function setLabel(string $label): self\n    {\n        $this->configuration->setLabel($label);\n        return $this;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-factory-pattern",children:"2. Factory Pattern"}),"\n",(0,a.jsx)(n.p,{children:"Les factories cr\xe9ent des objets complexes de mani\xe8re coh\xe9rente :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Factory;\n\nclass EditableColumnFactory\n{\n    public function text(string $name, string $property, string $label): EditableColumnV2\n    {\n        return new EditableColumnV2(\n            name: $name,\n            property: $property,\n            label: $label,\n            type: 'text',\n            renderer: $this->getRenderer('text')\n        );\n    }\n    \n    public function select(string $name, string $property, string $label, array $choices): EditableColumnV2\n    {\n        $column = new EditableColumnV2(\n            name: $name,\n            property: $property,\n            label: $label,\n            type: 'select',\n            renderer: $this->getRenderer('select')\n        );\n        \n        $column->setChoices($choices);\n        return $column;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-strategy-pattern",children:"3. Strategy Pattern"}),"\n",(0,a.jsx)(n.p,{children:"Les renderers utilisent le pattern Strategy pour un rendu flexible :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\InlineEdit\\Renderer;\n\ninterface FieldRendererInterface\n{\n    public function supports(EditableFieldConfiguration $config): bool;\n    public function render(EditableFieldConfiguration $config, mixed $value, object $entity): string;\n}\n\nabstract class AbstractFieldRenderer implements FieldRendererInterface\n{\n    abstract public function supports(EditableFieldConfiguration $config): bool;\n    \n    protected function escapeHtml(string $value): string\n    {\n        return htmlspecialchars($value, ENT_QUOTES | ENT_HTML5, 'UTF-8');\n    }\n    \n    protected function generateFieldId(object $entity, string $field): string\n    {\n        return sprintf('inline-edit-%s-%s', $entity->getId(), $field);\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-registry-pattern",children:"4. Registry Pattern"}),"\n",(0,a.jsxs)(n.p,{children:["Le ",(0,a.jsx)(n.code,{children:"FieldRendererRegistry"})," centralise la gestion des renderers :"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\InlineEdit\\Renderer;\n\nclass FieldRendererRegistry\n{\n    /** @var array<string, FieldRendererInterface> */\n    private array $renderers = [];\n    \n    public function addRenderer(FieldRendererInterface $renderer): void\n    {\n        $this->renderers[] = $renderer;\n    }\n    \n    public function getRenderer(EditableFieldConfiguration $config): FieldRendererInterface\n    {\n        foreach ($this->renderers as $renderer) {\n            if ($renderer->supports($config)) {\n                return $renderer;\n            }\n        }\n        \n        throw new \\RuntimeException(sprintf(\n            'No renderer found for field type \"%s\"',\n            $config->getFieldType()\n        ));\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"architecture-en-couches",children:"Architecture en Couches"}),"\n",(0,a.jsx)(n.h3,{id:"1-couche-pr\xe9sentation",children:"1. Couche Pr\xe9sentation"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Live Components et Templates Twig"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Component;\n\n#[AsLiveComponent('SigmasoftDataTable')]\nclass DataTableComponent\n{\n    use DefaultActionTrait;\n    \n    #[ExposeInTemplate]\n    public string $entityClass;\n    \n    #[ExposeInTemplate]\n    public array $configuration = [];\n    \n    #[LiveProp(writable: true)]\n    public int $page = 1;\n    \n    #[LiveProp(writable: true)]\n    public string $search = '';\n    \n    public function __invoke(): Response\n    {\n        return $this->render('@SigmasoftDataTable/components/DataTable.html.twig', [\n            'data' => $this->loadData(),\n            'config' => $this->configuration\n        ]);\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-couche-service",children:"2. Couche Service"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Services principaux et logique m\xe9tier"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Service;\n\nclass InlineEditServiceV2\n{\n    public function __construct(\n        private EntityManagerInterface $entityManager,\n        private ValidatorInterface $validator,\n        private FieldRendererRegistry $rendererRegistry,\n        private LoggerInterface $logger\n    ) {}\n    \n    public function updateField(\n        object $entity,\n        string $field,\n        mixed $value,\n        EditableFieldConfiguration $config\n    ): InlineEditResult {\n        // D\xe9but de transaction\n        $this->entityManager->beginTransaction();\n        \n        try {\n            // Validation\n            $violations = $this->validateField($entity, $field, $value, $config);\n            if (count($violations) > 0) {\n                throw new ValidationException($violations);\n            }\n            \n            // Mise \xe0 jour\n            $this->propertyAccessor->setValue($entity, $field, $value);\n            \n            // Persistance\n            $this->entityManager->persist($entity);\n            $this->entityManager->flush();\n            $this->entityManager->commit();\n            \n            return InlineEditResult::success($entity, $field, $value);\n            \n        } catch (\\Exception $e) {\n            $this->entityManager->rollback();\n            $this->logger->error('Inline edit failed', [\n                'entity' => get_class($entity),\n                'field' => $field,\n                'error' => $e->getMessage()\n            ]);\n            \n            return InlineEditResult::error($e->getMessage());\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-couche-donn\xe9es",children:"3. Couche Donn\xe9es"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Data Providers et Repository Pattern"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\DataProvider;\n\nclass DoctrineDataProvider implements DataProviderInterface\n{\n    public function __construct(\n        private EntityManagerInterface $entityManager,\n        private PaginatorInterface $paginator\n    ) {}\n    \n    public function getData(\n        string $entityClass,\n        int $page = 1,\n        int $limit = 25,\n        ?string $search = null,\n        ?string $sort = null,\n        ?string $direction = 'asc'\n    ): DataTableResultInterface {\n        $repository = $this->entityManager->getRepository($entityClass);\n        $queryBuilder = $repository->createQueryBuilder('e');\n        \n        // Recherche\n        if ($search) {\n            $this->applySearch($queryBuilder, $search, $entityClass);\n        }\n        \n        // Tri\n        if ($sort) {\n            $queryBuilder->orderBy('e.' . $sort, $direction);\n        }\n        \n        // Pagination\n        $pagination = $this->paginator->paginate(\n            $queryBuilder,\n            $page,\n            $limit\n        );\n        \n        return new DataTableResult(\n            items: $pagination->getItems(),\n            totalItems: $pagination->getTotalItemCount(),\n            itemsPerPage: $limit,\n            currentPage: $page\n        );\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"configuration-et-injection-de-d\xe9pendances",children:"Configuration et Injection de D\xe9pendances"}),"\n",(0,a.jsx)(n.h3,{id:"configuration-du-bundle",children:"Configuration du Bundle"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\DependencyInjection;\n\nclass Configuration implements ConfigurationInterface\n{\n    public function getConfigTreeBuilder(): TreeBuilder\n    {\n        $treeBuilder = new TreeBuilder('sigmasoft_data_table');\n        $rootNode = $treeBuilder->getRootNode();\n        \n        $rootNode\n            ->children()\n                ->arrayNode('defaults')\n                    ->children()\n                        ->integerNode('items_per_page')->defaultValue(25)->end()\n                        ->booleanNode('enable_search')->defaultTrue()->end()\n                        ->booleanNode('enable_sort')->defaultTrue()->end()\n                        ->booleanNode('enable_pagination')->defaultTrue()->end()\n                        ->scalarNode('table_class')->defaultValue('table table-striped')->end()\n                        ->scalarNode('date_format')->defaultValue('d/m/Y H:i')->end()\n                    ->end()\n                ->end()\n                ->arrayNode('entities')\n                    ->useAttributeAsKey('class')\n                    ->arrayPrototype()\n                        ->children()\n                            ->scalarNode('label')->isRequired()->end()\n                            ->arrayNode('fields')\n                                ->useAttributeAsKey('name')\n                                ->arrayPrototype()\n                                    ->children()\n                                        ->scalarNode('type')->isRequired()->end()\n                                        ->scalarNode('label')->isRequired()->end()\n                                        ->booleanNode('sortable')->defaultTrue()->end()\n                                        ->booleanNode('searchable')->defaultTrue()->end()\n                                    ->end()\n                                ->end()\n                            ->end()\n                        ->end()\n                    ->end()\n                ->end()\n            ->end();\n        \n        return $treeBuilder;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"compiler-pass",children:"Compiler Pass"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\DependencyInjection\\Compiler;\n\nclass FieldRendererPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        if (!$container->has(FieldRendererRegistry::class)) {\n            return;\n        }\n        \n        $registry = $container->findDefinition(FieldRendererRegistry::class);\n        $taggedServices = $container->findTaggedServiceIds('sigmasoft.field_renderer');\n        \n        foreach ($taggedServices as $id => $tags) {\n            $registry->addMethodCall('addRenderer', [new Reference($id)]);\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"s\xe9curit\xe9-et-validation",children:"S\xe9curit\xe9 et Validation"}),"\n",(0,a.jsx)(n.h3,{id:"architecture-de-s\xe9curit\xe9",children:"Architecture de S\xe9curit\xe9"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Security;\n\nclass DataTableVoter extends Voter\n{\n    public const VIEW = 'DATATABLE_VIEW';\n    public const EDIT = 'DATATABLE_EDIT';\n    public const DELETE = 'DATATABLE_DELETE';\n    \n    protected function supports(string $attribute, $subject): bool\n    {\n        return in_array($attribute, [self::VIEW, self::EDIT, self::DELETE])\n            && $subject instanceof DataTableConfiguration;\n    }\n    \n    protected function voteOnAttribute(string $attribute, $subject, TokenInterface $token): bool\n    {\n        $user = $token->getUser();\n        \n        if (!$user instanceof UserInterface) {\n            return false;\n        }\n        \n        return match($attribute) {\n            self::VIEW => $this->canView($subject, $user),\n            self::EDIT => $this->canEdit($subject, $user),\n            self::DELETE => $this->canDelete($subject, $user),\n            default => false\n        };\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"validation-en-profondeur",children:"Validation en Profondeur"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Validation;\n\nclass FieldValidator\n{\n    public function __construct(\n        private ValidatorInterface $validator,\n        private PropertyAccessorInterface $propertyAccessor\n    ) {}\n    \n    public function validateField(\n        object $entity,\n        string $field,\n        mixed $value,\n        array $constraints = []\n    ): ConstraintViolationListInterface {\n        // Validation des contraintes personnalis\xe9es\n        if (!empty($constraints)) {\n            return $this->validator->validate($value, $constraints);\n        }\n        \n        // Validation via annotations/attributs de l'entit\xe9\n        $metadata = $this->validator->getMetadataFor($entity);\n        \n        if ($metadata->hasPropertyMetadata($field)) {\n            $propertyMetadata = $metadata->getPropertyMetadata($field);\n            $constraints = [];\n            \n            foreach ($propertyMetadata as $member) {\n                $constraints = array_merge($constraints, $member->getConstraints());\n            }\n            \n            return $this->validator->validate($value, $constraints);\n        }\n        \n        return new ConstraintViolationList();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"performance-et-optimisation",children:"Performance et Optimisation"}),"\n",(0,a.jsx)(n.h3,{id:"strat\xe9gies-de-cache",children:"Strat\xe9gies de Cache"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Cache;\n\nclass DataTableCache\n{\n    private CacheInterface $cache;\n    \n    public function getConfiguration(string $entityClass): ?DataTableConfiguration\n    {\n        $cacheKey = 'datatable_config_' . md5($entityClass);\n        \n        return $this->cache->get($cacheKey, function (ItemInterface $item) use ($entityClass) {\n            $item->expiresAfter(3600); // 1 heure\n            \n            // G\xe9n\xe9ration de la configuration\n            return $this->configResolver->resolve($entityClass);\n        });\n    }\n    \n    public function invalidate(string $entityClass): void\n    {\n        $cacheKey = 'datatable_config_' . md5($entityClass);\n        $this->cache->delete($cacheKey);\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"optimisation-des-requ\xeates",children:"Optimisation des Requ\xeates"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Query;\n\nclass QueryOptimizer\n{\n    public function optimizeQuery(QueryBuilder $queryBuilder, array $columns): void\n    {\n        // S\xe9lection partielle pour performance\n        $select = ['e.id'];\n        foreach ($columns as $column) {\n            if ($column->isVisible()) {\n                $select[] = 'e.' . $column->getProperty();\n            }\n        }\n        $queryBuilder->select($select);\n        \n        // Eager loading des relations\n        $this->addEagerLoading($queryBuilder, $columns);\n        \n        // Index hints si support\xe9\n        if ($this->supportsIndexHints()) {\n            $this->addIndexHints($queryBuilder);\n        }\n    }\n    \n    private function addEagerLoading(QueryBuilder $queryBuilder, array $columns): void\n    {\n        foreach ($columns as $column) {\n            if ($column instanceof RelationColumn) {\n                $queryBuilder->leftJoin('e.' . $column->getRelation(), $column->getRelation())\n                           ->addSelect($column->getRelation());\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"tests-et-qualit\xe9",children:"Tests et Qualit\xe9"}),"\n",(0,a.jsx)(n.h3,{id:"structure-des-tests",children:"Structure des Tests"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"tests/\n\u251c\u2500\u2500 Unit/\n\u2502   \u251c\u2500\u2500 Builder/\n\u2502   \u2502   \u2514\u2500\u2500 DataTableBuilderTest.php\n\u2502   \u251c\u2500\u2500 Column/\n\u2502   \u2502   \u2514\u2500\u2500 EditableColumnTest.php\n\u2502   \u2514\u2500\u2500 Service/\n\u2502       \u2514\u2500\u2500 InlineEditServiceV2Test.php\n\u251c\u2500\u2500 Integration/\n\u2502   \u251c\u2500\u2500 Component/\n\u2502   \u2502   \u2514\u2500\u2500 DataTableComponentTest.php\n\u2502   \u2514\u2500\u2500 DataProvider/\n\u2502       \u2514\u2500\u2500 DoctrineDataProviderTest.php\n\u2514\u2500\u2500 Functional/\n    \u251c\u2500\u2500 Controller/\n    \u2502   \u2514\u2500\u2500 DataTableControllerTest.php\n    \u2514\u2500\u2500 Maker/\n        \u2514\u2500\u2500 MakeDataTableTest.php\n"})}),"\n",(0,a.jsx)(n.h3,{id:"tests-unitaires",children:"Tests Unitaires"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace Sigmasoft\\DataTableBundle\\Tests\\Unit\\Service;\n\nclass InlineEditServiceV2Test extends TestCase\n{\n    private InlineEditServiceV2 $service;\n    private EntityManagerInterface $entityManager;\n    private ValidatorInterface $validator;\n    \n    protected function setUp(): void\n    {\n        $this->entityManager = $this->createMock(EntityManagerInterface::class);\n        $this->validator = $this->createMock(ValidatorInterface::class);\n        \n        $this->service = new InlineEditServiceV2(\n            $this->entityManager,\n            $this->validator,\n            new FieldRendererRegistry(),\n            new NullLogger()\n        );\n    }\n    \n    public function testUpdateFieldSuccess(): void\n    {\n        $entity = new User();\n        $entity->setName('Old Name');\n        \n        $this->validator->expects($this->once())\n            ->method('validate')\n            ->willReturn(new ConstraintViolationList());\n        \n        $this->entityManager->expects($this->once())\n            ->method('beginTransaction');\n        \n        $this->entityManager->expects($this->once())\n            ->method('persist')\n            ->with($entity);\n        \n        $this->entityManager->expects($this->once())\n            ->method('flush');\n        \n        $this->entityManager->expects($this->once())\n            ->method('commit');\n        \n        $config = new EditableFieldConfiguration('name', 'text');\n        $result = $this->service->updateField($entity, 'name', 'New Name', $config);\n        \n        $this->assertTrue($result->isSuccess());\n        $this->assertEquals('New Name', $entity->getName());\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"extension-et-personnalisation",children:"Extension et Personnalisation"}),"\n",(0,a.jsx)(n.h3,{id:"cr\xe9er-un-renderer-personnalis\xe9",children:"Cr\xe9er un Renderer Personnalis\xe9"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"namespace App\\DataTable\\Renderer;\n\nuse Sigmasoft\\DataTableBundle\\InlineEdit\\Renderer\\AbstractFieldRenderer;\nuse Sigmasoft\\DataTableBundle\\InlineEdit\\Configuration\\EditableFieldConfiguration;\n\nclass RatingFieldRenderer extends AbstractFieldRenderer\n{\n    public function supports(EditableFieldConfiguration $config): bool\n    {\n        return $config->getFieldType() === 'rating';\n    }\n    \n    protected function renderView(\n        EditableFieldConfiguration $config,\n        mixed $value,\n        object $entity,\n        array $options = []\n    ): string {\n        $rating = (int) $value;\n        $maxRating = $options['max_rating'] ?? 5;\n        \n        $stars = str_repeat('\u2605', $rating) . str_repeat('\u2606', $maxRating - $rating);\n        \n        return sprintf(\n            '<span class=\"rating-field\" data-rating=\"%d\">%s</span>',\n            $rating,\n            $stars\n        );\n    }\n    \n    protected function renderEditForm(\n        EditableFieldConfiguration $config,\n        mixed $value,\n        object $entity,\n        array $options = []\n    ): string {\n        $maxRating = $options['max_rating'] ?? 5;\n        $html = '<div class=\"rating-edit\">';\n        \n        for ($i = 1; $i <= $maxRating; $i++) {\n            $checked = $i <= $value ? 'checked' : '';\n            $html .= sprintf(\n                '<input type=\"radio\" name=\"rating_%s\" value=\"%d\" %s>',\n                $config->getFieldName(),\n                $i,\n                $checked\n            );\n        }\n        \n        $html .= '</div>';\n        return $html;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"enregistrement-du-renderer",children:"Enregistrement du Renderer"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# config/services.yaml\nservices:\n    App\\DataTable\\Renderer\\RatingFieldRenderer:\n        tags:\n            - { name: sigmasoft.field_renderer }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"javascript-et-frontend",children:"JavaScript et Frontend"}),"\n",(0,a.jsx)(n.h3,{id:"architecture-stimulus",children:"Architecture Stimulus"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// assets/controllers/datatable_controller.js\nimport { Controller } from '@hotwired/stimulus'\nimport { InlineEditManager } from '../services/InlineEditManager'\n\nexport default class extends Controller {\n    static targets = ['table', 'search', 'pagination']\n    static values = {\n        url: String,\n        entityClass: String\n    }\n    \n    connect() {\n        this.inlineEditManager = new InlineEditManager(this.element)\n        this.initializeEventListeners()\n    }\n    \n    initializeEventListeners() {\n        // Recherche en temps r\xe9el\n        this.searchTarget.addEventListener('input', \n            this.debounce(this.search.bind(this), 500)\n        )\n        \n        // \xc9dition inline\n        this.element.addEventListener('inline-edit:start', this.onEditStart.bind(this))\n        this.element.addEventListener('inline-edit:save', this.onEditSave.bind(this))\n        this.element.addEventListener('inline-edit:cancel', this.onEditCancel.bind(this))\n    }\n    \n    async search(event) {\n        const query = event.target.value\n        \n        const response = await fetch(this.urlValue, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: JSON.stringify({\n                search: query,\n                entity: this.entityClassValue\n            })\n        })\n        \n        if (response.ok) {\n            const html = await response.text()\n            this.updateTable(html)\n        }\n    }\n    \n    debounce(func, wait) {\n        let timeout\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout)\n                func(...args)\n            }\n            clearTimeout(timeout)\n            timeout = setTimeout(later, wait)\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"service-d\xe9dition-inline",children:"Service d'\xc9dition Inline"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// assets/services/InlineEditManager.js\nexport class InlineEditManager {\n    constructor(element) {\n        this.element = element\n        this.editingFields = new Map()\n        this.init()\n    }\n    \n    init() {\n        this.element.addEventListener('click', (e) => {\n            if (e.target.closest('.inline-editable')) {\n                this.startEdit(e.target.closest('.inline-editable'))\n            }\n        })\n        \n        // Raccourcis clavier\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.cancelAllEdits()\n            }\n            if (e.key === 'Enter' && e.ctrlKey) {\n                this.saveAllEdits()\n            }\n        })\n    }\n    \n    startEdit(field) {\n        const fieldId = field.dataset.fieldId\n        const fieldType = field.dataset.fieldType\n        \n        if (this.editingFields.has(fieldId)) {\n            return\n        }\n        \n        const editor = this.createEditor(fieldType, field)\n        this.editingFields.set(fieldId, {\n            field,\n            editor,\n            originalValue: field.textContent\n        })\n        \n        field.replaceWith(editor)\n        editor.focus()\n    }\n    \n    createEditor(type, field) {\n        switch (type) {\n            case 'text':\n                return this.createTextEditor(field)\n            case 'select':\n                return this.createSelectEditor(field)\n            case 'textarea':\n                return this.createTextareaEditor(field)\n            default:\n                return this.createTextEditor(field)\n        }\n    }\n    \n    async save(fieldId) {\n        const editData = this.editingFields.get(fieldId)\n        if (!editData) return\n        \n        const { field, editor } = editData\n        const newValue = editor.value\n        \n        try {\n            const response = await fetch('/datatable/inline-edit', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRF-Token': this.getCsrfToken()\n                },\n                body: JSON.stringify({\n                    entity: field.dataset.entity,\n                    id: field.dataset.entityId,\n                    field: field.dataset.field,\n                    value: newValue\n                })\n            })\n            \n            if (response.ok) {\n                field.textContent = newValue\n                editor.replaceWith(field)\n                this.editingFields.delete(fieldId)\n                this.showSuccess('Sauvegard\xe9 avec succ\xe8s')\n            } else {\n                const error = await response.json()\n                this.showError(error.message)\n            }\n        } catch (error) {\n            this.showError('Erreur de connexion')\n        }\n    }\n    \n    getCsrfToken() {\n        return document.querySelector('meta[name=\"csrf-token\"]')?.content || ''\n    }\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"support-et-ressources",children:"Support et Ressources"}),"\n",(0,a.jsx)(n.h3,{id:"documentation-compl\xe8te",children:"Documentation Compl\xe8te"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcd6 ",(0,a.jsx)(n.strong,{children:"API Reference"})," : ",(0,a.jsx)(n.a,{href:"../api/overview",children:"Documentation API"})]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udfa8 ",(0,a.jsx)(n.strong,{children:"Personnalisation"})," : ",(0,a.jsx)(n.a,{href:"../user-guide/customization",children:"Guide de customisation"})]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,a.jsx)(n.strong,{children:"Exemples"})," : ",(0,a.jsx)(n.a,{href:"../examples/basic-crud",children:"Cas d'usage"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"communaut\xe9-et-support",children:"Communaut\xe9 et Support"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udc1b ",(0,a.jsx)(n.strong,{children:"Issues GitHub"})," : ",(0,a.jsx)(n.a,{href:"https://github.com/Chancel18/SigmasoftDataTableBundle/issues",children:"Signaler un probl\xe8me"})]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcac ",(0,a.jsx)(n.strong,{children:"Discussions"})," : ",(0,a.jsx)(n.a,{href:"https://github.com/Chancel18/SigmasoftDataTableBundle/discussions",children:"Forum communautaire"})]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udce7 ",(0,a.jsx)(n.strong,{children:"Support technique"})," : ",(0,a.jsx)(n.a,{href:"mailto:support@sigmasoft-solution.com",children:"support@sigmasoft-solution.com"})]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Documentation technique r\xe9dig\xe9e par ",(0,a.jsx)(n.a,{href:"mailto:g.makela@sigmasoft-solution.com",children:"G\xe9d\xe9on MAKELA"})," - ",(0,a.jsx)(n.a,{href:"https://sigmasoft-solution.com",children:"Sigmasoft Solutions"})]})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);